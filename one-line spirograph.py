(lambda a,j,g:(lambda w,p,s,t:((lambda q:(t.setCoords(-1*q,-1*q,q,q)))(max(w)if all([i<min(w)for i in p])else max(w)+(max(p)-min(w))),(lambda wt,pt,r,d,l,c:[[(lambda f:[[((g.Line(g.Point(f[k][0],f[k][1]),g.Point(l[k][0],l[k][1])).draw(t)if len(l)>k and l[k]!=None else None),l.__setitem__(k,f[k]))for k in range(len(f))]])((lambda k:[[k[0]+(j.cos(j.radians(pt[0]))*_),k[1]+(j.sin(j.radians(pt[0]))*_)]for _ in p])([sum([j.cos(j.radians(wt[x]))*c[x]for x in range(len(c))]),sum([j.sin(j.radians(wt[x]))*c[x]for x in range(len(c))])])),[(wt.__setitem__(u,v))for u,v in enumerate(list(map((lambda x,y:x+y),wt,d)))],pt.__setitem__(0,wt[-1])] for i in range(int(r*(360/s)))])([0 for i in w],[0],((lambda l,m:[[[m.__setitem__(0,l(m[0],i))]for i in w],m][1])((lambda a,b:abs(a*b)//j.gcd(a,b)),[1]))[0]/w[0],((lambda m:[[[m.append((w[i-1]*s*(-1**i))/w[i])]for i in range(1,len(w))],m][1])([s])),[None for i in p],[w[i]-w[i+1]for i in range(len(w)-1)])))(a.literal_eval(input('What wheels would you like the spirograph to have?\n')),a.literal_eval(input('What drawing points would you like the innermost wheel to have?\n')),float(input('How often would you like to calculate a point, in degrees?\n')),g.GraphWin('Spirograph',int(input('How wide would you like the graph to be?\n')),int(input('How tall would you like the graph to be?\n')),True)))(__import__('ast'),__import__('math'),__import__('graphics'))
